#!/usr/bin/env bash

UNAMEOUT="$(uname -s)"

WHITE='\033[1;37m'
NC='\033[0m'

# Verify operating system is supported...
case "${UNAMEOUT}" in
    Linux*)             MACHINE=linux;;
    Darwin*)            MACHINE=mac;;
    *)                  MACHINE="UNKNOWN"
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
    echo "Unsupported operating system [$(uname -s)]. Deebee supports macOS, Linux, and Windows (WSL2)." >&2

    exit 1
fi

# Load Deebee .env
if [ -f .env ]
then
    export $(cat .env | sed 's/#.*//g' | xargs)
fi

if [ "$MACHINE" == "linux" ]; then
    export SEDCMD="sed -i"
elif [ "$MACHINE" == "mac" ]; then
    export SEDCMD="sed -i .bak"
fi

# Ensure that Docker is running...
if ! docker info > /dev/null 2>&1; then
    echo -e "${WHITE}Docker is not running.${NC}" >&2

    exit 1
fi

# Determine if Sail is currently up...
PSRESULT="$(docker-compose ps -q)"

if docker-compose ps | grep 'Exit' &> /dev/null; then
    docker-compose down > /dev/null 2>&1

    EXEC="no"
elif [ -n "$PSRESULT" ]; then
    EXEC="yes"
else
    EXEC="no"
fi

# Function that outputs Sail is not running...
function deebee_is_not_running {
    echo -e "${WHITE}Deebee is not running.${NC}" >&2
    echo "" >&2
    echo -e "${WHITE}You may start Deebee by running the following commands:${NC} 'deebee up' or 'deebee up -d'" >&2

    exit 1
}

# Impelement this https://gist.github.com/spalladino/6d981f7b33f6e0afe6bb

if [ $# -gt 0 ]; then
    # Initiate a MySQL CLI terminal session within the "mysql" container...
    if [ "$1" == "mysql57" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                mysql57 \
                bash -c 'MYSQL_PWD=${MYSQL_PASSWORD} mysql -u ${MYSQL_USER} ${MYSQL_DATABASE}'
        else
            deebee_is_not_running
        fi

    # Initiate a MySQL CLI terminal session within the "mysql" container...
    elif [ "$1" == "mysql80" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                mysql80 \
                bash -c 'MYSQL_PWD=${MYSQL_PASSWORD} mysql -u ${MYSQL_USER} ${MYSQL_DATABASE}'
        else
            deebee_is_not_running
        fi

    # Initiate a PostgreSQL CLI terminal session within the "pgsql" container...
    # elif [ "$1" == "psql" ]; then
    #     shift 1

    #     if [ "$EXEC" == "yes" ]; then
    #         docker-compose exec \
    #              pgsql \
    #              bash -c 'PGPASSWORD=${PGPASSWORD} psql -U ${POSTGRES_USER} ${POSTGRES_DB}'
    #     else
    #         deebee_is_not_running
    #     fi

    # Pass unknown commands to the "docker-compose" binary...
    else
        docker-compose "$@"
    fi
else
    docker-compose ps
fi